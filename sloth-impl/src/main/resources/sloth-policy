/*
 * This is an example an example policy file for Sloth Access Control
 * Author: Libin Song, Northwestern University
 *
 * There are two types of policies: global and local. Global policies
 * are intended for all requests. When a request comes in, it will be
 * checked against all of the global policies. While local policies
 * are intended for individual user only. Local policy has user-related
 * attributes: role and user_name. When a request from a certain user
 * comes in, only the related local policies of that matching role and
 * user_name will be checked.
 *
 * There are two reasons for designing these two separated policy set.
 * One is for performance, permission engine will only check global
 * policies and related local polices. It will greatly reduce the
 * policy checking burden when the policy set is large. And the other
 * more important reason is for expressiveness and simplicity. One of
 * the feature that Sloth Access Control provide is resource isolation.
 * Policies can be designed to limit user access requests on his own
 * resources. There will be plenty of policies isolating users. And
 * these polices are intended for individual user only. So, provided
 * with local policies, network administrators can group local policies
 * together, instead of specifying intended user every time.
 *
 */



/*
 * This is the pre-defined data structure that can be used anywhere
 * when designing policies.
 *
 * {
 *     "sloth": {
 *         "subject": {
 *             "role": "user",
 *             "user_name": "bob"
 *         },
 *         "action": {
 *             "method": "POST",
 *             "url": "/v2.0/networks",
 *             "query_string": ""
 *         },
 *         "environment": {
 *             "date": "2017-04-13",
 *             "time": "18:08:00",
 *             "day_of_week": "sat"
 *         }
 *     }
 * }
 *
 * The syntax for accessing attributes in sloth attributes is:
 * sloth.subject.role == "user",
 * sloth.environment.day_of_week == "sun"
 *
 */


/*
 * This is an example of Json data that may be along with request
 *
 * {
 *     "network": {
 *         "segments": [
 *             {
 *                 "provider:segmentation_id": 2,
 *                 "provider:physical_network": "public",
 *                 "provider:network_type": "vlan"
 *             },
 *             {
 *                 "provider:physical_network": "default",
 *                 "provider:network_type": "flat"
 *             }
 *         ],
 *         "name": "net1",
 *         "admin_state_up": true,
 *         "qos_policy_id": "6a8454ade84346f59e8d40665f878b2e"
 *     }
 * }
 *
 * The syntax for accessing attributes in Json data is:
 * $.network.admin_state_up == true
 * $.network.segments[0].provider:network_type == "flat"
 * $.network.segments[*].provider:network_type CONTAIN flat
 *
 * For detailed syntax, please refer to Jayway JsonPath
 * https://github.com/json-path/JsonPath
 *
 */


/*
 * Here is the algorithm for permission checking
 *
 * boolean permission_checking (request) {
 *     for (policy in global_policy) {
 *         result = policy.eval(request)
 *         if (result == accept) {
 *             return true
 *         } else if (result = reject) {
 *             return false
 *         }
 *     }
 *     for (policy in local_policy[request.role][request.user_name]) {
 *         result = policy.eval(request)
 *         if (result == accept) {
 *             return true
 *         } else if (reject) {
 *             return false
 *         }
 *     }
 *     return false
 * }
 *
 *
 * And here is the algorithm for policy evaluation
 *
 * Result eval (request) {
 *     if (reach ACCEPT statement) {
 *         return ACCEPT
 *     } else if (reach REJECT statement) {
 *         return REJECT
 *     } else {
 *         return UNKNOWN
 *     }
 * }
 *
 */






/*
 * GLOBAL_POLICY {
 *     ${policy_name} {
 *         if (${condition_statement}) {
 *             ACCEPT | REJECT | ${if_statement}
 *         } else if (${condition_statement}) {
 *             ACCEPT | REJECT | ${if_statement}
 *         } else {
 *             ACCEPT | REJECT | ${if_statement}
 *         }
 *     }
 * }
 */
GLOBAL_POLICY {
    admin_accept_all {
        if (sloth.subject.role == "admin") {
            ACCEPT
        }
    }

    all_can_get {
        if (sloth.action.method == "GET") {
            ACCEPT
        }
    }

    all_can_post {
        if (sloth.action.method == "POST") {
            ACCEPT
        }
    }

    all_cannot_delete {
        if (sloth.action.method == "DELETE") {
            REJECT
        }
    }
}




/*
 * LOCAL_POLICY {
 *     ${role}, ${user_name} {
 *         ${policy_name} {
 *             if (${condition_statement}) {
 *                 ACCEPT | REJECT | ${if_statement}
 *             } else if (${condition_statement}) {
 *                 ACCEPT | REJECT | ${if_statement}
 *             } else {
 *                 ACCEPT | REJECT | ${if_statement}
 *             }
 *         }
 *     }
 * }
 */

LOCAL_POLICY {
    admin, admin {
        no_local_policy {
            ACCEPT
        }
    }

    user, Lily {
        only_get {
            if (sloth.action.method == "GET") {
                    ACCEPT
                } else if (sloth.action.method == "POST") {
                    REJECT
                } else if (sloth.action.method == "DELETE") {
                    REJECT
                }
        }
    }
}
